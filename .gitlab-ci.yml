variables:
   DEV_USERNAME: deployment
   DEV_SERVER_IP: 10.1.100.225

   PROD_EXTENSION_USERNAME: deployment
   PROD_EXTENSION_SERVER_IP: 10.1.100.166


image: node:11

cache:
    paths:
    - node_modules/

stages:
   - build
   - deploy
   - release

### BUILDS

buildProdExtension:
  stage: build

  only:
    - extension
  before_script:
    - git submodule sync --recursive
    - git submodule update --init --recursive readium-js
  script:
  - LAST_TAG=$(git describe --tags | cut -d '-' -f1)
  - sed -i "s/0\.31\.1/$LAST_TAG/" package.json
  # - sed -i "s/TIMESTAMPMERIGHTHERE/$(date)/" src/cloud-reader/offlinePebl.appcache
  - cp "$PROD_EXTENSION_WEB_READER_CONFIG" src/cloud-reader/config.js

  - echo "{" > src/i18n/_locales/en_US/skinning.json

  - "echo '\"i18n_pebl_library\" : { \"message\" : \"eXtension Library\" },' >> src/i18n/_locales/en_US/skinning.json"
  - "echo '\"i18n_pebl_reader\" : { \"message\" : \"eXtension Reader\" },' >> src/i18n/_locales/en_US/skinning.json"
  - "echo '\"i18n_pebl_title\" : { \"message\" : \"eXtension Foundation\" },' >> src/i18n/_locales/en_US/skinning.json"
  - "echo '\"i18n_pebl_webreader_logo\" : { \"message\" : \"images/eXtension-icon_small.png\" }' >> src/i18n/_locales/en_US/skinning.json"

  - echo "}" >> src/i18n/_locales/en_US/skinning.json

  - chmod +x pack.sh
  - npm run prepare:all
  - npm run dist
  artifacts:
    paths:
      - dist/cloud-reader

############

buildProdUSMC:
  stage: build

  only:
    - usmc
  before_script:
    - git submodule sync --recursive
    - git submodule update --init --recursive readium-js
  script:
  - LAST_TAG=$(git describe --tags | cut -d '-' -f1)
  - sed -i "s/0\.31\.1/$LAST_TAG/" package.json
  - sed -i "s/TIMESTAMPMERIGHTHERE/$(date)/" src/cloud-reader/offlinePebl.appcache
  - cp "$USMC_WEB_READER_CONFIG" src/cloud-reader/config.js
  - chmod +x pack.sh
  - npm run prepare:all
  - npm run dist
  artifacts:
    paths:
      - dist/cloud-reader

############

buildExtensionQa:
  stage: build

  only:
    - extensionQA
  before_script:
    - git submodule sync --recursive
    - git submodule update --init --recursive readium-js
  script:
  - LAST_TAG=$(git describe --tags | cut -d '-' -f1)
  - sed -i "s/0\.31\.1/$LAST_TAG/" package.json
  # - sed -i "s/TIMESTAMPMERIGHTHERE/$(date)/" src/cloud-reader/offlinePebl.appcache
  - cp "$QA_EXTENSION_WEB_READER_CONFIG" src/cloud-reader/config.js

  - echo "{" > src/i18n/_locales/en_US/skinning.json

  - "echo '\"i18n_pebl_library\" : { \"message\" : \"eXtension Library\" },' >> src/i18n/_locales/en_US/skinning.json"
  - "echo '\"i18n_pebl_reader\" : { \"message\" : \"eXtension Reader\" },' >> src/i18n/_locales/en_US/skinning.json"
  - "echo '\"i18n_pebl_title\" : { \"message\" : \"eXtension Foundation\" },' >> src/i18n/_locales/en_US/skinning.json"
  - "echo '\"i18n_pebl_webreader_logo\" : { \"message\" : \"images/eXtension-icon_small.png\" }' >> src/i18n/_locales/en_US/skinning.json"

  - echo "}" >> src/i18n/_locales/en_US/skinning.json

  - chmod +x pack.sh
  - npm run prepare:all
  - npm run dist
  artifacts:
    paths:
      - dist/cloud-reader

############

buildProdExtensionEEO:
  stage: build

  only:
    - extensionEEO
  before_script:
    - git submodule sync --recursive
    - git submodule update --init --recursive readium-js
  script:
  - LAST_TAG=$(git describe --tags | cut -d '-' -f1)
  - sed -i "s/0\.31\.1/$LAST_TAG/" package.json
  # Yaml doesn't like ':<space>' wrap command in quotes
  # - "sed -i \"s/lrsCredential: \'.*\'/lrsCredential: \'$PROD_EXTENSION_LRS_AUTH\'/g\" src/js/pebl-login-widget.js"
  # - "sed -i \"s/production: false/production: true/g\" src/mixins/config.js"
  - sed -i "s/TIMESTAMPMERIGHTHERE/$(date)/" src/cloud-reader/offlinePebl.appcache
  - echo "window.Configuration = {};" > src/cloud-reader/config.js
  - echo "window.Configuration.OAuthURL = '$PROD_EXTENSION_OAUTH_URL';" >> src/cloud-reader/config.js
  - echo "window.Configuration.OAuthToken = '$PROD_EXTENSION_OAUTH_TOKEN';" >> src/cloud-reader/config.js
  - echo "window.Configuration.lrsUrl = '$PROD_EXTENSION_LRS_URL';" >> src/cloud-reader/config.js
  - echo "window.Configuration.lrsCredential = '$PROD_EXTENSION_LRS_CREDENTIAL';" >> src/cloud-reader/config.js
  - echo "window.Configuration.useLinkedIn = true;" >> src/cloud-reader/config.js
  - echo "window.Configuration.favicon = 'images/eXtension-icon_small.png';" >> src/cloud-reader/config.js
  - echo "window.Configuration.loginImage = 'images/eXtension-black.png';" >> src/cloud-reader/config.js

  - echo "{" > src/i18n/_locales/en_US/skinning.json

  - "echo '\"i18n_pebl_library\" : { \"message\" : \"eXtension EEO Library\" },' >> src/i18n/_locales/en_US/skinning.json"
  - "echo '\"i18n_pebl_reader\" : { \"message\" : \"eXtension EEO Reader\" },' >> src/i18n/_locales/en_US/skinning.json"
  - "echo '\"i18n_pebl_title\" : { \"message\" : \"eXtension Foundation\" },' >> src/i18n/_locales/en_US/skinning.json"
  - "echo '\"i18n_pebl_webreader_logo\" : { \"message\" : \"images/eXtension-icon_small.png\" }' >> src/i18n/_locales/en_US/skinning.json"

  - echo "}" >> src/i18n/_locales/en_US/skinning.json
  - chmod +x pack.sh
  - npm run prepare:all
  - npm run dist
  artifacts:
    paths:
      - dist/cloud-reader

############

buildNpsProd:
  stage: build

  only:
    - npsProd
  before_script:
    - git submodule sync --recursive
    - git submodule update --init --recursive readium-js
  script:
  - LAST_TAG=$(git describe --tags | cut -d '-' -f1)
  - sed -i "s/0\.31\.1/$LAST_TAG/" package.json
  # Yaml doesn't like ':<space>' wrap command in quotes
  # - "sed -i \"s/lrsCredential: \'.*\'/lrsCredential: \'$PROD_LRS_AUTH\'/g\" src/js/pebl-login-widget.js"
  # - "sed -i \"s/production: false/production: true/g\" src/mixins/config.js"
  - sed -i "s/TIMESTAMPMERIGHTHERE/$(date)/" src/cloud-reader/offlinePebl.appcache
  - echo "window.Configuration = {};" > src/cloud-reader/config.js
  - echo "window.Configuration.lrsUrl = '$PROD_NPS_LRS_URL';" >> src/cloud-reader/config.js
  - echo "window.Configuration.lrsCredential = '$PROD_NPS_LRS_CREDENTIAL';" >> src/cloud-reader/config.js
  - echo "window.Configuration.useLinkedIn = false;" >> src/cloud-reader/config.js
  - echo "window.Configuration.loginImage = 'images/PEBL-Logo-Color-small.png';" >> src/cloud-reader/config.js
  - echo "window.Configuration.userList = ['NPS01', 'NPS02', 'NPS03', 'NPS04', 'NPS05', 'NPS06', 'NPS07', 'NPS08', 'NPS09', 'NPS10', 'NPS11', 'NPS12', 'NPS13', 'NPS14', 'NPS15', 'NPS16', 'NPS17', 'NPS18', 'NPS19', 'NPS20', 'NPS21', 'NPS22', 'NPS23', 'NPS24', 'NPS25', 'NPS26', 'NPS27', 'NPS28', 'NPS29', 'NPS30', 'NPS31', 'NPS32', 'NPS33', 'NPS34', 'NPS35', 'NPS36', 'NPS37', 'NPS38', 'NPS39', 'NPS40', 'NPS41', 'NPS42', 'NPS43', 'NPS44', 'NPS45', 'NPS46', 'NPS47', 'NPS48', 'NPS49', 'NPS50', 'NPS51', 'NPS52', 'NPS53', 'NPS54', 'NPS55', 'NPS56', 'NPS57', 'NPS58', 'NPS59', 'NPS60'];" >> src/cloud-reader/config.js

  - npm run prepare:all
  - npm run dist
  artifacts:
    paths:
    - dist/cloud-reader

############

buildAdlProd:
  stage: build

  only:
    - adlProd
  before_script:
    - git submodule sync --recursive
    - git submodule update --init --recursive readium-js
  script:
  - LAST_TAG=$(git describe --tags | cut -d '-' -f1)
  - sed -i "s/0\.31\.1/$LAST_TAG/" package.json
  # Yaml doesn't like ':<space>' wrap command in quotes
  # - "sed -i \"s/lrsCredential: \'.*\'/lrsCredential: \'$PROD_LRS_AUTH\'/g\" src/js/pebl-login-widget.js"
  # - "sed -i \"s/production: false/production: true/g\" src/mixins/config.js"
  - sed -i "s/TIMESTAMPMERIGHTHERE/$(date)/" src/cloud-reader/offlinePebl.appcache
  - cp "$ADL_READER_CONFIG" src/cloud-reader/config.js
  - chmod +x pack.sh
  - npm run prepare:all
  - npm run dist
  artifacts:
    paths:
    - dist/cloud-reader

############

buildLwProd:
  stage: build

  only:
    - lwProd
  before_script:
    - git submodule sync --recursive
    - git submodule update --init --recursive readium-js
  script:
  - LAST_TAG=$(git describe --tags | cut -d '-' -f1)
  - sed -i "s/0\.31\.1/$LAST_TAG/" package.json
  # Yaml doesn't like ':<space>' wrap command in quotes
  # - "sed -i \"s/lrsCredential: \'.*\'/lrsCredential: \'$PROD_LRS_AUTH\'/g\" src/js/pebl-login-widget.js"
  # - "sed -i \"s/production: false/production: true/g\" src/mixins/config.js"
  - sed -i "s/TIMESTAMPMERIGHTHERE/$(date)/" src/cloud-reader/offlinePebl.appcache
  - echo "window.Configuration = {};" > src/cloud-reader/config.js
  - echo "window.Configuration.lrsUrl = '$PROD_ADL_LRS_URL';" >> src/cloud-reader/config.js
  - echo "window.Configuration.lrsCredential = '$PROD_LW_LRS_CREDENTIAL';" >> src/cloud-reader/config.js
  - echo "window.Configuration.useLinkedIn = false;" >> src/cloud-reader/config.js
  - echo "window.Configuration.loginImage = 'images/PEBL-Logo-Color-small.png';" >> src/cloud-reader/config.js
  - echo "window.Configuration.favicon = 'images/PEBL-icon-16.ico';" >> src/cloud-reader/config.js
  - echo "window.Configuration.userList = ['Guest', 'B001', 'B002', 'B003', 'B004', 'B005', 'B006', 'B007', 'B008', 'B009', 'B010', 'B011', 'B012', 'B013', 'B014', 'B015', 'B016', 'B017', 'B018', 'B019', 'B020', 'B021', 'B022', 'B023', 'B024', 'B025', 'B026', 'B027', 'B028', 'B029', 'B030', 'B031', 'B032', 'B033', 'B034', 'B035', 'B036', 'B037', 'B038', 'B039', 'B040', 'B099'];" >> src/cloud-reader/config.js
  - chmod +x pack.sh
  - npm run prepare:all
  - npm run dist
  artifacts:
    paths:
    - dist/cloud-reader

############

buildProd:
  stage: build

  only:
    - master
  before_script:
    - git submodule sync --recursive
    - git submodule update --init --recursive readium-js
  script:
  - LAST_TAG=$(git describe --tags | cut -d '-' -f1)
  - sed -i "s/0\.31\.1/$LAST_TAG/" package.json
  # Yaml doesn't like ':<space>' wrap command in quotes
  # - "sed -i \"s/lrsCredential: \'.*\'/lrsCredential: \'$PROD_LRS_AUTH\'/g\" src/js/pebl-login-widget.js"
  # - "sed -i \"s/production: false/production: true/g\" src/mixins/config.js"
  - sed -i "s/TIMESTAMPMERIGHTHERE/$(date)/" src/cloud-reader/offlinePebl.appcache
  - echo "window.Configuration = {};" > src/cloud-reader/config.js
  - echo "window.Configuration.lrsUrl = '$PROD_LRS_URL';" >> src/cloud-reader/config.js
  - echo "window.Configuration.lrsCredential = '$PROD_LRS_CREDENTIAL';" >> src/cloud-reader/config.js
  - echo "window.Configuration.useLinkedIn = false;" >> src/cloud-reader/config.js
  - echo "window.Configuration.loginImage = 'images/PEBL-Logo-Color-small.png';" >> src/cloud-reader/config.js
  - echo "window.Configuration.favicon = 'images/PEBL-icon-16.ico';" >> src/cloud-reader/config.js
  - echo "window.Configuration.userList = ['Learner', 'Learner1', 'Learner2', 'Learner3', 'Learner5', 'Learner7'];" >> src/cloud-reader/config.js
  - chmod +x pack.sh
  - npm run prepare:all
  - npm run dist
  artifacts:
    paths:
    - dist/cloud-reader

buildQA:
  stage: build

  only:
    - QA
  before_script:
    - git submodule sync --recursive
    - git submodule update --init --recursive readium-js
  script:
  - 'curl -L --output artifacts.zip --header "JOB-TOKEN: $CI_JOB_TOKEN" "https://git.eduworks.us/api/v4/projects/94/jobs/artifacts/qa/download?job=buildQA"'
  - LAST_TAG=$(git describe --tags | cut -d '-' -f1)

  - cp "$QA_WEB_READER_CONFIG" src/cloud-reader/config.js
  - sed -i "s/VERSION/$LAST_TAG/" src/cloud-reader/config.js

  - unzip artifacts.zip
  - mv dist/PeBLCore.js src/js/
  - chmod +x pack.sh
  - npm run prepare:all
  - export MINIMIZE=true && npm run dist
  artifacts:
    paths:
    - dist/cloud-reader

############

buildADLDocker:
  stage: build
  only:
    - tags
  before_script:
    - git submodule sync --recursive
    - git submodule update --init --recursive readium-js
  script:
  - 'curl -L --output artifacts.zip --header "JOB-TOKEN: $CI_JOB_TOKEN" "https://git.eduworks.us/api/v4/projects/94/jobs/artifacts/dev/download?job=buildDev"'
  - LAST_TAG=$(git describe --tags)

  - cp src/cloud-reader/sampleConfig.js src/cloud-reader/config.js
  - sed -i "s/VERSION/$LAST_TAG/" src/cloud-reader/config.js

  - cp "$DEV_MANIFEST" src/cloud-reader/manifest.json

  - echo "{" > src/i18n/_locales/en_US/skinning.json

  - "echo '\"i18n_pebl_library\" : { \"message\" : \"USMC Library\" },' >> src/i18n/_locales/en_US/skinning.json"
  - "echo '\"i18n_pebl_reader\" : { \"message\" : \"USMC Reader\" },' >> src/i18n/_locales/en_US/skinning.json"
  - "echo '\"i18n_pebl_webreader_logo\" : { \"message\" : \"images/usmc-favicon-32x32.png\" }' >> src/i18n/_locales/en_US/skinning.json"

  - echo "}" >> src/i18n/_locales/en_US/skinning.json

  - unzip artifacts.zip
  - mv dist/PeBLCore.js src/js/
  - chmod +x pack.sh
  - npm run prepare:all
  - export MINIMIZE=true && npm run dist
  artifacts:
    paths:
    - dist/cloud-reader

############

buildDev:
  stage: build
  only:
    - Dev
  before_script:
    - git submodule sync --recursive
    - git submodule update --init --recursive readium-js
  script:
  - 'curl -L --output artifacts.zip --header "JOB-TOKEN: $CI_JOB_TOKEN" "https://git.eduworks.us/api/v4/projects/94/jobs/artifacts/dev/download?job=buildDev"'
  - LAST_TAG=$(git describe --tags)
  # - sed -i "s/TIMESTAMPMERIGHTHERE/$(date)/" src/cloud-reader/offlinePebl.appcache

  - cp "$DEV_WEB_READER_CONFIG" src/cloud-reader/config.js
  - sed -i "s/VERSION/$LAST_TAG/" src/cloud-reader/config.js

  - cp "$DEV_MANIFEST" src/cloud-reader/manifest.json

  - echo "{" > src/i18n/_locales/en_US/skinning.json

  - "echo '\"i18n_pebl_library\" : { \"message\" : \"USMC Library\" },' >> src/i18n/_locales/en_US/skinning.json"
  - "echo '\"i18n_pebl_reader\" : { \"message\" : \"USMC Reader\" },' >> src/i18n/_locales/en_US/skinning.json"
  - "echo '\"i18n_pebl_webreader_logo\" : { \"message\" : \"images/usmc-favicon-32x32.png\" }' >> src/i18n/_locales/en_US/skinning.json"

  - echo "}" >> src/i18n/_locales/en_US/skinning.json

  - unzip artifacts.zip
  - mv dist/PeBLCore.js src/js/
  - chmod +x pack.sh
  - npm run prepare:all
  - npm run dist
  artifacts:
    paths:
    - dist/cloud-reader


### DEPLOYMENTS

deployDocker:
  stage: deploy
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE/pebl-reader:$CI_COMMIT_TAG
  only:
    - tags

############

prodExtensionDeploy:
  stage: deploy
  only:
    - extension
  script:
    ## Pull down apt-get install repos
   - apt-get update -y
   - apt-get install openssh-client -y

   ##
   ## Run ssh-agent (inside the build environment)
   ##
   - eval $(ssh-agent -s)

   ##
   ## Create the SSH directory and give it the right permissions
   ##
   - mkdir -p ~/.ssh
   - chmod 700 ~/.ssh

   ##
   ## Assuming you created the SSH_KNOWN_HOSTS variable, uncomment the
   ## following two lines. NOTE the $SSH_KNOWN_HOSTS variable should be added
   ## in the gitlab interface and not here
   ##
   - echo "$PROD_EXTENSION_SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
   - chmod 644 ~/.ssh/known_hosts

   ## NOTE the $STAGINT_PRIVATE_KEY variable should be added
   ## in the gitlab interface and not here
   ##
   - echo "$PROD_EXTENSION_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null

   ## Build commands
   - ssh -p22 $PROD_EXTENSION_USERNAME@$PROD_EXTENSION_SERVER_IP "mv /var/www/html/epub_content /var/www/books/prodBookshelf"
   - ssh -p22 $PROD_EXTENSION_USERNAME@$PROD_EXTENSION_SERVER_IP "rm -rf /var/www/html/*"
   - scp -P22 -r dist/cloud-reader/* $PROD_EXTENSION_USERNAME@$PROD_EXTENSION_SERVER_IP:/var/www/html/
   - ssh -p22 $PROD_EXTENSION_USERNAME@$PROD_EXTENSION_SERVER_IP "mv /var/www/books/prodBookshelf /var/www/html/epub_content"

### ----------------------

prodExtensionEEODeploy:
  stage: deploy
  only:
    - extensionEEO
  script:
    ## Pull down apt-get install repos
   - apt-get update -y
   - apt-get install openssh-client -y

   ##
   ## Run ssh-agent (inside the build environment)
   ##
   - eval $(ssh-agent -s)

   ##
   ## Create the SSH directory and give it the right permissions
   ##
   - mkdir -p ~/.ssh
   - chmod 700 ~/.ssh

   ##
   ## Assuming you created the SSH_KNOWN_HOSTS variable, uncomment the
   ## following two lines. NOTE the $SSH_KNOWN_HOSTS variable should be added
   ## in the gitlab interface and not here
   ##
   - echo "$PROD_EXTENSION_SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
   - chmod 644 ~/.ssh/known_hosts

   ## NOTE the $STAGINT_PRIVATE_KEY variable should be added
   ## in the gitlab interface and not here
   ##
   - echo "$PROD_EXTENSION_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null

   ## Build commands
   - ssh -p22 $PROD_EXTENSION_USERNAME@$PROD_EXTENSION_SERVER_IP "mv /var/www/htmlEEO/epub_content /var/www/books/prodEEOBookshelf"
   - ssh -p22 $PROD_EXTENSION_USERNAME@$PROD_EXTENSION_SERVER_IP "rm -rf /var/www/htmlEEO/*"
   - scp -P22 -r dist/cloud-reader/* $PROD_EXTENSION_USERNAME@$PROD_EXTENSION_SERVER_IP:/var/www/htmlEEO/
   - ssh -p22 $PROD_EXTENSION_USERNAME@$PROD_EXTENSION_SERVER_IP "mv /var/www/books/prodEEOBookshelf /var/www/htmlEEO/epub_content"

### ----------------------

prodNpsDeploy:
  stage: deploy
  only:
    - npsProd
  script:
    ## Pull down apt-get install repos
   - apt-get update -y
   - apt-get install openssh-client -y

   ##
   ## Run ssh-agent (inside the build environment)
   ##
   - eval $(ssh-agent -s)

   ##
   ## Create the SSH directory and give it the right permissions
   ##
   - mkdir -p ~/.ssh
   - chmod 700 ~/.ssh

   ##
   ## Assuming you created the SSH_KNOWN_HOSTS variable, uncomment the
   ## following two lines. NOTE the $SSH_KNOWN_HOSTS variable should be added
   ## in the gitlab interface and not here
   ##
   - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
   - chmod 644 ~/.ssh/known_hosts

   ## NOTE the $STAGINT_PRIVATE_KEY variable should be added
   ## in the gitlab interface and not here
   ##
   - echo "$DEV_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null

   ## Build commands
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "mv /var/www/htmlNpsReader/epub_content /var/www/bookTempDeployment/prodNpsBookshelf"
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "rm -rf /var/www/htmlNpsReader/*"
   - scp -P22 -r dist/cloud-reader/* $DEV_USERNAME@$DEV_SERVER_IP:/var/www/htmlNpsReader/
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "mv /var/www/bookTempDeployment/prodNpsBookshelf /var/www/htmlNpsReader/epub_content"

prodAdlDeploy:
  stage: deploy
  only:
    - adlProd
  script:
    ## Pull down apt-get install repos
   - apt-get update -y
   - apt-get install openssh-client -y

   ##
   ## Run ssh-agent (inside the build environment)
   ##
   - eval $(ssh-agent -s)

   ##
   ## Create the SSH directory and give it the right permissions
   ##
   - mkdir -p ~/.ssh
   - chmod 700 ~/.ssh

   ##
   ## Assuming you created the SSH_KNOWN_HOSTS variable, uncomment the
   ## following two lines. NOTE the $SSH_KNOWN_HOSTS variable should be added
   ## in the gitlab interface and not here
   ##
   - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
   - chmod 644 ~/.ssh/known_hosts

   ## NOTE the $STAGINT_PRIVATE_KEY variable should be added
   ## in the gitlab interface and not here
   ##
   - echo "$DEV_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null

   ## Build commands
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "mv /var/www/htmlAdlReader/epub_content /var/www/bookTempDeployment/prodAdlBookshelf"
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "rm -rf /var/www/htmlAdlReader/*"
   - scp -P22 -r dist/cloud-reader/* $DEV_USERNAME@$DEV_SERVER_IP:/var/www/htmlAdlReader/
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "mv /var/www/bookTempDeployment/prodAdlBookshelf /var/www/htmlAdlReader/epub_content"

prodLwDeploy:
  stage: deploy
  only:
    - lwProd
  script:
    ## Pull down apt-get install repos
   - apt-get update -y
   - apt-get install openssh-client -y

   ##
   ## Run ssh-agent (inside the build environment)
   ##
   - eval $(ssh-agent -s)

   ##
   ## Create the SSH directory and give it the right permissions
   ##
   - mkdir -p ~/.ssh
   - chmod 700 ~/.ssh

   ##
   ## Assuming you created the SSH_KNOWN_HOSTS variable, uncomment the
   ## following two lines. NOTE the $SSH_KNOWN_HOSTS variable should be added
   ## in the gitlab interface and not here
   ##
   - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
   - chmod 644 ~/.ssh/known_hosts

   ## NOTE the $STAGINT_PRIVATE_KEY variable should be added
   ## in the gitlab interface and not here
   ##
   - echo "$DEV_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null

   ## Build commands
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "mv /var/www/htmlLwReader/epub_content /var/www/bookTempDeployment/prodLwBookshelf"
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "rm -rf /var/www/htmlLwReader/*"
   - scp -P22 -r dist/cloud-reader/* $DEV_USERNAME@$DEV_SERVER_IP:/var/www/htmlLwReader/
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "mv /var/www/bookTempDeployment/prodLwBookshelf /var/www/htmlLwReader/epub_content"


extensionQADeploy:
  stage: deploy
  only:
    - extensionQA
  environment:
    name: extensionQA
    url: https://qa.reader.extension.peblproject.org
  script:
    ## Pull down apt-get install repos
   - apt-get update -y
   - apt-get install openssh-client -y

   ##
   ## Run ssh-agent (inside the build environment)
   ##
   - eval $(ssh-agent -s)

   ##
   ## Create the SSH directory and give it the right permissions
   ##
   - mkdir -p ~/.ssh
   - chmod 700 ~/.ssh

   ##
   ## Assuming you created the SSH_KNOWN_HOSTS variable, uncomment the
   ## following two lines. NOTE the $SSH_KNOWN_HOSTS variable should be added
   ## in the gitlab interface and not here
   ##
   - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
   - chmod 644 ~/.ssh/known_hosts

   ## NOTE the $STAGINT_PRIVATE_KEY variable should be added
   ## in the gitlab interface and not here
   ##
   - echo "$DEV_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null

   ## Build commands
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "mv /var/www/qa.reader.extension.peblproject.org/epub_content /var/www/bookTempDeployment/tempExtensionQABooks"
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "rm -rf /var/www/qa.reader.extension.peblproject.org/*"
   - scp -P22 -r dist/cloud-reader/* $DEV_USERNAME@$DEV_SERVER_IP:/var/www/qa.reader.extension.peblproject.org/
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "mv /var/www/bookTempDeployment/tempExtensionQABooks /var/www/qa.reader.extension.peblproject.org/epub_content"



usmcDeploy:
  stage: deploy
  only:
    - usmc
  environment:
    name: usmc
    url: https://tecom.peblproject.org
  script:
    ## Pull down apt-get install repos
   - apt-get update -y
   - apt-get install openssh-client -y

   ##
   ## Run ssh-agent (inside the build environment)
   ##
   - eval $(ssh-agent -s)

   ##
   ## Create the SSH directory and give it the right permissions
   ##
   - mkdir -p ~/.ssh
   - chmod 700 ~/.ssh

   ##
   ## Assuming you created the SSH_KNOWN_HOSTS variable, uncomment the
   ## following two lines. NOTE the $SSH_KNOWN_HOSTS variable should be added
   ## in the gitlab interface and not here
   ##
   - echo "$USMC_SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
   - chmod 644 ~/.ssh/known_hosts

   ## NOTE the $STAGINT_PRIVATE_KEY variable should be added
   ## in the gitlab interface and not here
   ##
   - chmod 600 "$USMC_PRIVATE_KEY"
   - ssh-add "$USMC_PRIVATE_KEY" > /dev/null

   ## Build commands
   - ssh -p22 deploymentpebl@$USMC_SERVER_IP "mv /var/www/tecom.peblproject.org/epub_content /var/www/miscPeBL/tempUSMCBooks"
   - ssh -p22 deploymentpebl@$USMC_SERVER_IP "rm -rf /var/www/tecom.peblproject.org/*"
   - scp -P22 -r dist/cloud-reader/* deploymentpebl@$USMC_SERVER_IP:/var/www/tecom.peblproject.org/
   - ssh -p22 deploymentpebl@$USMC_SERVER_IP "mv /var/www/miscPeBL/tempUSMCBooks /var/www/tecom.peblproject.org/epub_content"


prodDeploy:
  stage: deploy
  only:
    - master
  environment:
    name: prod
    url: https://reader.peblproject.org
  script:
    ## Pull down apt-get install repos
   - apt-get update -y
   - apt-get install openssh-client -y

   ##
   ## Run ssh-agent (inside the build environment)
   ##
   - eval $(ssh-agent -s)

   ##
   ## Create the SSH directory and give it the right permissions
   ##
   - mkdir -p ~/.ssh
   - chmod 700 ~/.ssh

   ##
   ## Assuming you created the SSH_KNOWN_HOSTS variable, uncomment the
   ## following two lines. NOTE the $SSH_KNOWN_HOSTS variable should be added
   ## in the gitlab interface and not here
   ##
   - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
   - chmod 644 ~/.ssh/known_hosts

   ## NOTE the $STAGINT_PRIVATE_KEY variable should be added
   ## in the gitlab interface and not here
   ##
   - echo "$DEV_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null

   ## Build commands
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "mv /var/www/htmlOrgReaderProd/epub_content /var/www/bookTempDeployment/prodBookshelf"
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "rm -rf /var/www/htmlOrgReaderProd/*"
   - scp -P22 -r dist/cloud-reader/* $DEV_USERNAME@$DEV_SERVER_IP:/var/www/htmlOrgReaderProd/
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "mv /var/www/bookTempDeployment/prodBookshelf /var/www/htmlOrgReaderProd/epub_content"

### ----------------------

qaDeploy:
  stage: deploy
  only:
    - QA
  environment:
    name: qa
    url: https://qa.reader.peblproject.org
  script:
   - apt-get update -y
   - apt-get install openssh-client -y
   ##
   ## Install ssh-agent if not already installed, it is required by Docker.
   ## (change apt-get to yum if you use an RPM-based image)
   ##
   - 'which ssh-agent || apt-get install openssh-client -y'

   ##
   ## Run ssh-agent (inside the build environment)
   ##
   - eval $(ssh-agent -s)

   ##
   ## Create the SSH directory and give it the right permissions
   ##
   - mkdir -p ~/.ssh
   - chmod 700 ~/.ssh

   ##
   ## Assuming you created the SSH_KNOWN_HOSTS variable, uncomment the
   ## following two lines. NOTE the $SSH_KNOWN_HOSTS variable should be added
   ## in the gitlab interface and not here
   ##
   - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
   - chmod 644 ~/.ssh/known_hosts

   ## NOTE the $STAGINT_PRIVATE_KEY variable should be added
   ## in the gitlab interface and not here
   ##
   - echo "$DEV_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null

   ## Build commands
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "mv /var/www/htmlOrgReaderQa/epub_content /var/www/bookTempDeployment/qaBookshelf"
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "rm -rf /var/www/htmlOrgReaderQa/*"
   - scp -P22 -r dist/cloud-reader/* $DEV_USERNAME@$DEV_SERVER_IP:/var/www/htmlOrgReaderQa/
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "mv /var/www/bookTempDeployment/qaBookshelf /var/www/htmlOrgReaderQa/epub_content"

### ----------------------

devDeploy:
  stage: deploy
  only:
    - Dev
  environment:
    name: dev
    url: https://dev.reader.peblproject.org
  script:
   ## Pull down apt-get install repos
   - apt-get update -y
   - apt-get install openssh-client -y
   ##
   ## Install ssh-agent if not already installed, it is required by Docker.
   ## (change apt-get to yum if you use an RPM-based image)
   ##
   - 'which ssh-agent || apt-get install openssh-client -y'

   ##
   ## Run ssh-agent (inside the build environment)
   ##
   - eval $(ssh-agent -s)

   ##
   ## Create the SSH directory and give it the right permissions
   ##
   - mkdir -p ~/.ssh
   - chmod 700 ~/.ssh

   ##
   ## Assuming you created the SSH_KNOWN_HOSTS variable, uncomment the
   ## following two lines. NOTE the $SSH_KNOWN_HOSTS variable should be added
   ## in the gitlab interface and not here
   ##
   - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
   - chmod 644 ~/.ssh/known_hosts

   ## NOTE the $STAGINT_PRIVATE_KEY variable should be added
   ## in the gitlab interface and not here
   ##
   - echo "$DEV_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null

   ## Build commands
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "mv /var/www/htmlOrgReaderDev/epub_content /var/www/bookTempDeployment/devBookshelf"
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "rm -rf /var/www/htmlOrgReaderDev/*"
   - scp -P22 -r dist/cloud-reader/* $DEV_USERNAME@$DEV_SERVER_IP:/var/www/htmlOrgReaderDev/
   - ssh -p22 $DEV_USERNAME@$DEV_SERVER_IP "mv /var/www/bookTempDeployment/devBookshelf /var/www/htmlOrgReaderDev/epub_content"


### ----------------------

qaRelease:
  stage: release
  only:
    - QA
  script:
    - apt-get update -y
    - apt-get install zip -y
    - apt-get install jq -y

    - cd dist/cloud-reader
    - mkdir epub_content
    - cd epub_content
    - touch epub_library.json
    - mkdir bookshelf
    - cd ..

    - zip -r ../../PeBLReader.zip .

    - cd ../..

    - LAST_TAG=$(git describe --tags | cut -d '-' -f1)

    - id=$(curl -H "Authorization:token $GITHUB_ACCESS_TOKEN" --data "{\"tag_name\":\"$LAST_TAG\", \"name\":\"QA_$LAST_TAG\", \"body\":\"QA PeBL WebReader\"}" "https://api.github.com/repos/peblproject/WebReader/releases" | jq '.id')

    - test=$(curl -H "Authorization:token $GITHUB_ACCESS_TOKEN" -H "Content-Type:$(file -b --mime-type PeBLReader.zip)" --data-binary "@PeBLReader.zip" "https://uploads.github.com/repos/peblproject/WebReader/releases/$id/assets?name=PeBLReader.zip")

    - echo $test


prodRelease:
  stage: release
  only:
    - master
  script:
    - apt-get update -y
    - apt-get install zip -y
    - apt-get install jq -y

    - cd dist/cloud-reader
    - mkdir epub_content
    - cd epub_content
    - touch epub_library.json
    - mkdir bookshelf
    - cd ..

    - zip -r ../../PeBLReader.zip .

    - cd ../..

    - LAST_TAG=$(git describe --tags | cut -d '-' -f1)

    - id=$(curl -H "Authorization:token $GITHUB_ACCESS_TOKEN" --data "{\"tag_name\":\"$LAST_TAG\", \"name\":\"$LAST_TAG\", \"body\":\"PeBL WebReader\"}" "https://api.github.com/repos/peblproject/WebReader/releases" | jq '.id')

    - curl -H "Authorization:token $GITHUB_ACCESS_TOKEN" -H "Content-Type:$(file -b --mime-type PeBLReader.zip)" --data-binary "@PeBLReader.zip" "https://uploads.github.com/repos/peblproject/WebReader/releases/$id/assets?name=PeBLReader.zip"
